// backend/middleware/authMiddleware.js
/**
 * Middleware x√°c th·ª±c & quy·ªÅn:
 * - verifyToken: verify JWT, g·∫Øn req.user = { id, role, ... }
 * - isManager: ch·ªâ ph√©p MANAGER
 * - isStaff: ch·ªâ ph√©p STAFF
 * - checkStoreAccess: ki·ªÉm tra quy·ªÅn truy c·∫≠p m·ªôt store (owner ho·∫∑c staff assigned)
 *
 * Ghi ch√∫:
 * - C·∫ßn ƒë·∫∑t process.env.JWT_SECRET trong .env
 * - C·∫ßn models User & Store ·ªü ../models
 * - S·ª≠ d·ª•ng c√πng c·∫•u tr√∫c User/Store nh∆∞ project
 */

const jwt = require("jsonwebtoken");
const User = require("../models/User");
const Store = require("../models/Store");
const mongoose = require("mongoose");

const JWT_SECRET = process.env.JWT_SECRET || "default_jwt_secret_change_in_env";

/**
 * verifyToken: middleware ƒë·ªçc header Authorization: Bearer <token>
 * N·∫øu h·ª£p l·ªá -> g·∫Øn req.user = decoded payload
 */
async function verifyToken(req, res, next) {
  try {
    const authHeader = req.headers["authorization"] || req.headers["Authorization"];
    if (!authHeader) {
      return res.status(401).json({ message: "Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p" });
    }

    const parts = authHeader.split(" ");
    if (parts.length !== 2 || parts[0] !== "Bearer") {
      return res.status(401).json({ message: "Token sai ƒë·ªãnh d·∫°ng (ph·∫£i l√† 'Bearer <token>')" });
    }

    const token = parts[1];
    try {
      const decoded = jwt.verify(token, JWT_SECRET);
      // decoded th∆∞·ªùng ch·ª©a { id, role, iat, exp }
      req.user = decoded;
      return next();
    } catch (err) {
      console.error("JWT verify error:", err);
      return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }
  } catch (err) {
    console.error("verifyToken error:", err);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

/**
 * isManager: allow only users with global role MANAGER
 */
function isManager(req, res, next) {
  try {
    if (req.user && req.user.role === "MANAGER") return next();
    return res.status(403).json({ message: "üö´ Ch·ªâ Manager m·ªõi c√≥ quy·ªÅn n√†y" });
  } catch (err) {
    console.error("isManager error:", err);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

/**
 * isStaff: allow only users with global role STAFF
 */
function isStaff(req, res, next) {
  try {
    if (req.user && req.user.role === "STAFF") return next();
    return res.status(403).json({ message: "üö´ Ch·ªâ Staff m·ªõi c√≥ quy·ªÅn n√†y" });
  } catch (err) {
    console.error("isStaff error:", err);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

/**
 * checkStoreAccess:
 * - X√°c ƒë·ªãnh storeId t·ª´: req.params.storeId || req.body.storeId || user.current_store
 * - Ki·ªÉm tra:
 *    + N·∫øu user l√† MANAGER v√† owner_id === userId -> OK
 *    + N·∫øu user c√≥ mapping trong user.store_roles -> OK (role OWNER/STAFF)
 * - G·∫Øn req.store v√† req.storeRole r·ªìi next()
 */
async function checkStoreAccess(req, res, next) {
  try {
    const userId = req.user?.id;
    if (!userId) return res.status(401).json({ message: "User ch∆∞a x√°c th·ª±c" });

    let storeId = req.params?.storeId || req.body?.storeId || null;

    // N·∫øu ch∆∞a c√≥ storeId, l·∫•y t·ª´ DB user.current_store
    if (!storeId) {
      const user = await User.findById(userId).lean();
      if (user && user.current_store) storeId = String(user.current_store);
    }

    if (!storeId) {
      return res.status(400).json({ message: "storeId kh√¥ng ƒë∆∞·ª£c cung c·∫•p" });
    }

    if (!mongoose.Types.ObjectId.isValid(storeId)) {
      return res.status(400).json({ message: "storeId kh√¥ng h·ª£p l·ªá" });
    }

    const store = await Store.findById(storeId);
    if (!store) return res.status(404).json({ message: "C·ª≠a h√†ng kh√¥ng t·ªìn t·∫°i" });

    // N·∫øu l√† owner (MANAGER) v√† tr√πng owner_id
    if (req.user.role === "MANAGER" && String(store.owner_id) === String(userId)) {
      req.store = store;
      req.storeRole = "OWNER";
      return next();
    }

    // Ki·ªÉm tra mapping trong user.store_roles (n·∫øu user ƒë∆∞·ª£c g√°n l√† STAFF tr√™n store)
    const user = await User.findById(userId);
    if (!user) return res.status(401).json({ message: "User kh√¥ng t·ªìn t·∫°i" });

    const mapping = (user.store_roles || []).find((r) => String(r.store) === String(store._id));
    if (mapping) {
      req.store = store;
      req.storeRole = mapping.role === "OWNER" ? "OWNER" : "STAFF";
      return next();
    }

    // N·∫øu kh√¥ng ƒë·ªß quy·ªÅn
    return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p c·ª≠a h√†ng n√†y" });
  } catch (err) {
    console.error("checkStoreAccess error:", err);
    return res.status(500).json({ message: "L·ªói server" });
  }
}

// Xu·∫•t c√°c h√†m ƒë·ªÉ router import b·∫±ng destructuring
module.exports = {
  verifyToken,
  isManager,
  isStaff,
  checkStoreAccess,
};
