// backend/controllers/financialController.js
const mongoose = require("mongoose");
const Order = require("../models/Order");
const Product = require("../models/Product");
const PurchaseOrder = require("../models/PurchaseOrder");
const PurchaseReturn = require("../models/PurchaseReturn");
const StockCheck = require("../models/StockCheck");
const StockDisposal = require("../models/StockDisposal");
const Employee = require("../models/Employee");
const { calcRevenueByPeriod } = require("./revenueController");
const { periodToRange } = require("../utils/period");
const { Parser } = require("json2csv");
const PDFDocument = require("pdfkit");

// üßÆ Helper: safe convert
const toNumber = (val) => {
  if (!val) return 0;
  if (typeof val === "number") return val;
  if (typeof val === "string") return parseFloat(val);
  if (val._bsontype === "Decimal128") return parseFloat(val.toString());
  return 0;
};

// üìÜ Helper: th√°ng trong k·ª≥
function getMonthsInPeriod(periodType) {
  switch (periodType) {
    case "month": //th√°ng
      return 1;
    case "quarter": //qu√Ω
      return 3;
    case "year": //nƒÉm
      return 12;
    default:
      return 1;
  }
}

// =====================================================================
const calcFinancialSummary = async ({ storeId, periodType, periodKey, extraExpense = 0 }) => {
  const { start, end } = periodToRange(periodType, periodKey);
  const objectStoreId = new mongoose.Types.ObjectId(storeId);

  // 1Ô∏è‚É£ T·ªïng doanh thu
  const revenueData = await calcRevenueByPeriod({ storeId, periodType, periodKey, type: "total" });
  let totalRevenue = toNumber(revenueData[0]?.totalRevenue);

  // 2Ô∏è‚É£ VAT
  const vat = await Order.aggregate([
    { $match: { storeId: objectStoreId, status: "paid", isVATInvoice: true, printDate: { $gte: start, $lte: end } } },
    { $group: { _id: null, totalVAT: { $sum: "$vatAmount" } } },
  ]);
  let totalVAT = toNumber(vat[0]?.totalVAT);

  // 3Ô∏è‚É£ Chi ph√≠ nh·∫≠p h√†ng (COGS)
  const purchases = await PurchaseOrder.aggregate([
    { $match: { store_id: objectStoreId, status: "ƒë√£ nh·∫≠p h√†ng", purchase_order_date: { $gte: start, $lte: end } } },
    { $group: { _id: null, total: { $sum: "$total_amount" } } },
  ]);
  const returns = await PurchaseReturn.aggregate([
    { $match: { store_id: objectStoreId, status: "ƒë√£ tr·∫£ h√†ng", return_date: { $gte: start, $lte: end } } },
    { $group: { _id: null, total: { $sum: "$total_amount" } } },
  ]);
  let totalCOGS = toNumber(purchases[0]?.total) - toNumber(returns[0]?.total);

  // 4Ô∏è‚É£ L·ª£i nhu·∫≠n g·ªôp
  let grossProfit = totalRevenue - totalCOGS;

  // 5Ô∏è‚É£ Chi ph√≠ v·∫≠n h√†nh (Operating Cost)
  const months = getMonthsInPeriod(periodType);
  // cho d√π l√† nƒÉm trong t∆∞∆°ng lai ch∆∞a b√°n h√†ng, v·∫´n t√≠nh l∆∞∆°ng cho nh√¢n vi√™n, n·∫øu xo√° nh√¢n vi√™n ƒëi th√¨ coi nh∆∞ m·ªçi th·ª© l√† 0 vnƒë, 
  // c√≤n n·∫øu kh√¥ng th√¨ k·ªÉ c·∫£ l√† nƒÉm 2030 v·∫´n lu√¥n c·ªông chi ph√≠ l∆∞∆°ng cho nh√¢n vi√™n, 
  // v√≠ d·ª• 5 tri·ªáu 1 th√°ng th√¨ 1 year l√† 60 tri·ªáu chi ph√≠ v·∫≠n h√†nh, l·ª£i nhu·∫≠n r√≤ng l√† √¢m 60 tri·ªáu
  const employees = await Employee.find({ store_id: objectStoreId, isDeleted: false })
    .populate("user_id", "role")
    .select("salary commission_rate user_id"); //l∆∞∆°ng v√† hoa h·ªìng

  const filteredEmployees = employees.filter((e) => ["MANAGER", "STAFF"].includes(e.user_id?.role));

  const totalSalary = filteredEmployees.reduce((sum, e) => sum + toNumber(e.salary) * months, 0);

  const empRevenue = await calcRevenueByPeriod({
    storeId,
    periodType,
    periodKey,
    type: "employee",
  });

  const totalCommission = empRevenue.reduce((sum, r) => {
    const emp = filteredEmployees.find((e) => e._id.toString() === r._id.toString());
    return sum + toNumber(r.totalRevenue) * (toNumber(emp?.commission_rate) / 100);
  }, 0);

  // üëâ FE g·ª≠i: ?extraExpense=1000000,2000000 (c√≥ th·ªÉ nhi·ªÅu h∆°n ho·∫∑c √≠t h∆°n)
  if (typeof extraExpense === "string" && extraExpense.includes(",")) {
    extraExpense = extraExpense.split(",").map(Number);
  } else if (Array.isArray(extraExpense)) {
    extraExpense = extraExpense.map(Number);
  } else {
    extraExpense = [Number(extraExpense)];
  }

  const totalExtraExpense = extraExpense.reduce((sum, val) => sum + (val || 0), 0);

  // ‚úÖ T·ªïng chi ph√≠ v·∫≠n h√†nh tr∆∞·ªõc khi c·ªông th√™m ph·∫ßn ƒëi·ªÅu ch·ªânh v√† h·ªßy h√†ng
  let operatingCost = totalSalary + totalCommission + totalExtraExpense;

  // 9Ô∏è‚É£ ƒêi·ªÅu ch·ªânh t·ªìn kho
  const adj = await StockCheck.aggregate([
    { $match: { store_id: objectStoreId, status: "ƒê√£ c√¢n b·∫±ng", check_date: { $gte: start, $lte: end } } },
    { $unwind: "$items" },
    {
      $group: {
        _id: null,
        total: {
          $sum: {
            $multiply: [{ $subtract: ["$items.actual_quantity", "$items.book_quantity"] }, "$items.cost_price"],
          },
        },
      },
    },
  ]);
  let stockAdjustmentValue = toNumber(adj[0]?.total);

  // üîü H√†ng h√≥a h·ªßy
  const disp = await StockDisposal.aggregate([
    { $match: { store_id: objectStoreId, status: "ho√†n th√†nh", disposal_date: { $gte: start, $lte: end } } },
    { $unwind: "$items" },
    { $group: { _id: null, total: { $sum: { $multiply: ["$items.quantity", "$items.unit_cost_price"] } } } },
  ]);
  let stockDisposalCost = toNumber(disp[0]?.total);

  // ‚úÖ C·∫≠p nh·∫≠t operatingCost cu·ªëi c√πng
  operatingCost += stockDisposalCost;
  if (stockAdjustmentValue < 0) operatingCost += Math.abs(stockAdjustmentValue);
  if (stockAdjustmentValue > 0) grossProfit += stockAdjustmentValue;

  // 6Ô∏è‚É£ L·ª£i nhu·∫≠n r√≤ng
  const netProfit = grossProfit - operatingCost - totalVAT;

  // 7Ô∏è‚É£ Gi√° tr·ªã t·ªìn kho hi·ªán t·∫°i
  const stock = await Product.aggregate([
    { $match: { store_id: objectStoreId } },
    { $group: { _id: null, total: { $sum: { $multiply: ["$stock_quantity", "$cost_price"] } } } },
  ]);
  let stockValue = toNumber(stock[0]?.total);

  return {
    totalRevenue,
    totalVAT,
    totalCOGS,
    grossProfit,
    operatingCost,
    netProfit,
    stockValue,
    stockAdjustmentValue,
    stockDisposalCost,
  };
};

// =====================================================================
const getFinancialSummary = async (req, res) => {
  try {
    const data = await calcFinancialSummary(req.query);
    res.json({ message: "B√°o c√°o t√†i ch√≠nh th√†nh c√¥ng", data });
  } catch (err) {
    console.error("L·ªói b√°o c√°o t√†i ch√≠nh:", err);
    res.status(500).json({ message: "L·ªói server khi b√°o c√°o t√†i ch√≠nh" });
  }
};

// =====================================================================
const exportFinancial = async (req, res) => {
  try {
    const { format = "csv" } = req.query;
    const data = await calcFinancialSummary(req.query);

    const rows = Object.entries(data).map(([metric, value]) => ({ metric, value }));

    if (format === "csv") {
      const parser = new Parser({ fields: ["metric", "value"] });
      const csv = parser.parse(rows);
      res.header("Content-Type", "text/csv");
      res.attachment("financial_report.csv");
      return res.send(csv);
    }

    if (format === "pdf") {
      res.setHeader("Content-Type", "application/pdf");
      const doc = new PDFDocument({ margin: 50 });
      doc.pipe(res);
      doc.fontSize(18).text("B√ÅO C√ÅO T√ÄI CH√çNH", { align: "center", underline: true }).moveDown();
      rows.forEach((r) => doc.text(`${r.metric}: ${r.value.toLocaleString("vi-VN")} VND`));
      doc.end();
      return;
    }

    res.status(400).json({ message: "Format kh√¥ng h·ªó tr·ª£" });
  } catch (err) {
    console.error("L·ªói export:", err);
    res.status(500).json({ message: "L·ªói server khi export b√°o c√°o" });
  }
};

module.exports = { getFinancialSummary, exportFinancial };

/*
M·∫´u JSON tr·∫£ v·ªÅ t·ª´ API nh∆∞ sau: period theo YEAR
{
    "message": "B√°o c√°o t√†i ch√≠nh th√†nh c√¥ng",
    "data": {
        "totalRevenue": 69935800,  -> t·ªïng doanh thu
        "totalVAT": 2450000,       -> thu·∫ø gi√° tr·ªã gia tƒÉng ph·∫£i n·ªôp
        "totalCOGS": 0,            -> Gi√° v·ªën h√†ng b√°n (Chi ph√≠ nh·∫≠p h√†ng)
        "grossProfit": 69935800,   -> L·ª£i nhu·∫≠n g·ªôp
        "operatingCost": 60034967.9,  -> Chi ph√≠ v·∫≠n h√†nh
        "netProfit": 7450832.1000000015,  -> l·ª£i nhu·∫≠n r√≤ng (l√£i sau thu·∫ø)
        "stockValue": 55495000,    -> Gi√° tr·ªã h√†ng t·ªìn kho
        "stockAdjustmentValue": 0, -> Gi√° tr·ªã ƒëi·ªÅu ch·ªânh t·ªìn kho
        "stockDisposalCost": 0     -> Chi ph√≠ h√†ng h√≥a h·ªßy
    }
}
*/
