// controllers/orderController.js (update: create pending lu√¥n, ko tr·ª´ stock; add confirmQR + printBill ƒë·ªÉ tr·ª´ khi in)
const mongoose = require("mongoose");
const Order = require("../models/Order");
const OrderItem = require("../models/OrderItem");
const OrderRefund = require("../models/OrderRefund");
const Product = require("../models/Product");
const Employee = require("../models/Employee");
const Store = require("../models/Store");
const { generateQRWithPayOS } = require("../services/payOSService");
const { v2: cloudinary } = require("cloudinary");

const createOrder = async (req, res) => {
  try {
    const { storeId, employeeId, customerInfo, items, paymentMethod } = req.body; // Body t·ª´ FE: items [{productId, quantity}]

    if (!items || items.length === 0) {
      console.log("L·ªói: Kh√¥ng c√≥ s·∫£n ph·∫©m trong h√≥a ƒë∆°n");
      return res.status(400).json({ message: "H√≥a ƒë∆°n ph·∫£i c√≥ √≠t nh·∫•t 1 s·∫£n ph·∫©m" });
    }

    // Validate s·∫£n ph·∫©m + t√≠nh total (ko tr·ª´ stock ·ªü ƒë√¢y, ch·ªù in bill)
    let total = 0;
    const validatedItems = [];
    const session = await mongoose.startSession();
    session.startTransaction();
    let qrData = null; // Define qrData = null ngo√†i if, safe ternary res.json
    try {
      for (let item of items) {
        const prod = await Product.findById(item.productId).session(session);
        if (
          !prod ||
          prod.store_id.toString() !== storeId.toString() ||
          prod.stock_quantity < item.quantity ||
          prod.status !== "ƒêang kinh doanh"
        ) {
          // Ki·ªÉm tra stock ƒë·ªß tr∆∞·ªõc, nh∆∞ng ko tr·ª´ - ch·ªâ warn n·∫øu thi·∫øu
          throw new Error(`S·∫£n ph·∫©m ${prod?.name || "kh√¥ng t·ªìn t·∫°i"} h·∫øt h√†ng ho·∫∑c kh√¥ng h·ª£p l·ªá`);
        }
        const priceAtTime = prod.price;
        const subtotal = (parseFloat(priceAtTime) * item.quantity).toFixed(2);
        total += parseFloat(subtotal);
        validatedItems.push({
          ...item,
          priceAtTime: priceAtTime.toString(),
          subtotal: subtotal.toString(),
        });
      }

      // T·∫°o Order pending (status default pending)
      const newOrder = new Order({
        storeId,
        employeeId,
        customerInfo,
        totalAmount: total.toFixed(2).toString(),
        paymentMethod,
      });

      await newOrder.save({ session });

      // L∆∞u OrderItems
      for (let validatedItem of validatedItems) {
        const newItem = new OrderItem({
          orderId: newOrder._id,
          ...validatedItem,
        });
        await newItem.save({ session });
      }

      let paymentRef = null;
      // N·∫øu ch·ªçn QR th√¨ t·∫°o QR PayOS (pending, ch·ªù webhook confirm)
      if (paymentMethod === "qr") {
        qrData = await generateQRWithPayOS({
          body: {
            amount: total,
            orderInfo: `Thanh toan hoa don ${newOrder._id}`, // Kh√¥ng d·∫•u theo l∆∞u √Ω c·∫≠u
          },
        });
        console.log("S·ª≠ d·ª•ng PayOS QR th√†nh c√¥ng");
        paymentRef = qrData.txnRef; // Ref t·ª´ PayOS cho webhook
        newOrder.paymentRef = paymentRef;
        newOrder.qrExpiry = new Date(Date.now() + 15 * 60 * 1000); // H·∫øt h·∫°n 15 ph√∫t

        await newOrder.save({ session });

        console.log(`T·∫°o QR pending th√†nh c√¥ng cho h√≥a ƒë∆°n ${newOrder._id}, ref: ${paymentRef}, ch·ªù webhook confirm`);
      } else {
        // Cash: Pending, ch·ªù in bill ƒë·ªÉ paid + tr·ª´ stock (ko l√†m g√¨ ·ªü ƒë√¢y)
        console.log(`T·∫°o h√≥a ƒë∆°n cash pending th√†nh c√¥ng cho ${newOrder._id}, ch·ªù in bill`);
      }

      await session.commitTransaction(); // Commit t·∫•t c·∫£
      session.endSession();

      // Inner try res.json sau commit, catch local format error ko abort
      try {
        // S·∫Øp x·∫øp l·∫°i format object ƒë·ªÉ _id l√™n ƒë·∫ßu d·ªÖ ƒë·ªçc
        const orderObj = newOrder.toObject();
        const orderedOrder = {
          _id: orderObj._id,
          ...orderObj,
          items: validatedItems,
        };

        res.status(201).json({
          message: "T·∫°o h√≥a ƒë∆°n th√†nh c√¥ng (pending)",
          order: orderedOrder,
          qrRef: paymentRef, // Ref ƒë·ªÉ webhook
          qrDataURL: qrData ? qrData.qrDataURL : null, // QR base64 FE render
          paymentLinkUrl: qrData ? qrData.paymentLinkUrl : null, // Link qu·∫πt n·∫øu PayOS
          qrExpiry: paymentMethod === "qr" ? newOrder.qrExpiry : null, // Expiry FE countdown
        });
      } catch (format_err) {
        console.log("L·ªói format response order:", format_err.message); // Log ti·∫øng Vi·ªát format error
        res.status(500).json({ message: "L·ªói format response: " + format_err.message }); // Return local ko abort
      }
    } catch (inner_err) {
      await session.abortTransaction(); // Abort ch·ªâ inner error (validate/save)
      session.endSession();
      console.error("L·ªói inner createOrder:", inner_err.message); // Log ti·∫øng Vi·ªát inner error
      res.status(500).json({ message: "L·ªói t·∫°o h√≥a ƒë∆°n n·ªôi b·ªô: " + inner_err.message });
    }
  } catch (err) {
    console.error("L·ªói t·∫°o h√≥a ƒë∆°n:", err.message); // Log ti·∫øng Vi·ªát outer error
    res.status(500).json({ message: "L·ªói server khi t·∫°o h√≥a ƒë∆°n: " + err.message });
  }
};

// Bonus: POST /api/orders/:orderId/set-paid-cash - Cho cash: Staff confirm giao d·ªãch tay ‚Üí set paid (tr∆∞·ªõc print)
const setPaidCash = async (req, res) => {
  try {
    const { orderId: mongoId } = req.params;
    const order = await Order.findById(mongoId);
    if (!order || order.paymentMethod !== "cash" || order.status !== "pending") {
      return res.status(400).json({ message: "H√≥a ƒë∆°n cash kh√¥ng h·ª£p l·ªá cho set paid" });
    }
    order.status = "paid";
    await order.save();
    console.log(`Set paid cash th√†nh c√¥ng cho h√≥a ƒë∆°n ${mongoId}, s·∫µn s√†ng in bill`);
    res.json({ message: "X√°c nh·∫≠n thanh to√°n cash th√†nh c√¥ng, s·∫µn s√†ng in h√≥a ƒë∆°n" });
  } catch (err) {
    console.error("L·ªói set paid cash:", err.message);
    res.status(500).json({ message: "L·ªói server set paid cash" });
  }
};

// POST /api/orders/:orderId/print-bill - In h√≥a ƒë∆°n (check paid ‚Üí tr·ª´ stock + generate text bill chi ti·∫øt v·ªõi populate)
const printBill = async (req, res) => {
  try {
    const { orderId: mongoId } = req.params; // D√πng _id t·ª± sinh c·ªßa MongoDb
    // Populate full order tr∆∞·ªõc: store name, employee fullName
    const order = await Order.findById(mongoId)
      .populate("storeId", "name") // Populate t√™n c·ª≠a h√†ng
      .populate("employeeId", "fullName") // T√™n nh√¢n vi√™n
      .lean();

    if (!order || order.status !== "paid") {
      console.log("H√≥a ƒë∆°n ch∆∞a paid, kh√¥ng th·ªÉ in bill:", mongoId);
      return res.status(400).json({ message: "H√≥a ƒë∆°n ch∆∞a thanh to√°n, kh√¥ng th·ªÉ in" });
    }

    // üëà Fix: Di chuy·ªÉn items ra ngo√†i session, populate cho bill (read only, ko c·∫ßn session)
    const items = await OrderItem.find({ orderId: order._id })
      .populate("productId", "name sku") // Populate t√™n/sku s·∫£n ph·∫©m cho bill
      .lean(); // Lean cho nhanh, ko session

    let isFirstPrint = order.printCount === 0; // üëà Check l·∫ßn in ƒë·∫ßu (printCount default 0)
    const isDuplicate = !isFirstPrint; // N·∫øu >0 th√¨ duplicate

    // Tr·ª´ stock ch·ªâ l·∫ßn ƒë·∫ßu (atomic session)
    if (isFirstPrint) {
      const session = await mongoose.startSession();
      session.startTransaction();
      try {
        for (let item of items) {
          // D√πng items t·ª´ ngo√†i, ch·ªâ tr·ª´ stock
          const prod = await Product.findById(item.productId._id).session(session); // Ref _id sau populate
          if (prod) {
            prod.stock_quantity -= item.quantity; // Tr·ª´ stock th·∫≠t
            await prod.save({ session });
            console.log(`In bill th√†nh c√¥ng cho ${prod.name}: Stock -${item.quantity}`);
          }
        }
        await session.commitTransaction();
        session.endSession();
      } catch (err) {
        await session.abortTransaction();
        session.endSession();
        throw new Error("L·ªói tr·ª´ stock khi in bill: " + err.message);
      }
    } else {
      console.log(`In h√≥a ƒë∆°n B·∫¢N SAO l·∫ßn ${order.printCount + 1}, kh√¥ng tr·ª´ stock cho ${mongoId}`);
    }

    // Generate text bill chi ti·∫øt (v·ªõi t√™n prod t·ª´ populate items, th√™m note duplicate n·∫øu c√≥)
    let bill = `=== H√ìA ƒê∆†N B√ÅN H√ÄNG ===\n`;
    bill += `ID H√≥a ƒë∆°n: ${order._id}\n`;
    bill += `C·ª≠a h√†ng: ${order.storeId?.name || "C·ª≠a h√†ng m·∫∑c ƒë·ªãnh"}\n`;
    bill += `Nh√¢n vi√™n: ${order.employeeId?.fullName || "N/A"}\n`;
    bill += `Kh√°ch h√†ng: ${order.customerInfo?.name || "N/A"} - ${order.customerInfo?.phone || ""}\n`;
    bill += `Ng√†y: ${new Date(order.createdAt).toLocaleString("vi-VN")}\n`;
    bill += `Ng√†y in: ${new Date().toLocaleString("vi-VN")}\n`;
    if (isDuplicate) bill += `(B·∫£n sao h√≥a ƒë∆°n - l·∫ßn in ${order.printCount + 1})\n`; // üëà Note duplicate
    bill += `\nCHI TI·∫æT S·∫¢N PH·∫®M:\n`;
    items.forEach((item) => {
      bill += `- ${item.productId?.name || "S·∫£n ph·∫©m"} (${item.productId?.sku || "N/A"}): ${item.quantity} x ${
        item.priceAtTime
      } = ${item.subtotal} VND\n`;
    });
    bill += `\nT·ªîNG TI·ªÄN: ${order.totalAmount.toString()} VND\n`; // toString() cho Decimal128 clean
    bill += `Ph∆∞∆°ng th·ª©c: ${order.paymentMethod === "cash" ? "TI·ªÄN M·∫∂T" : "QR CODE"}\n`; // R√µ r√†ng h∆°n cho bill
    bill += `Tr·∫°ng th√°i: ƒê√£ thanh to√°n\n`;
    bill += `=== C·∫¢M ∆†N QU√ù KH√ÅCH! ===\n`;

    // Update printDate/printCount (lu√¥n update, d√π duplicate)
    const updatedOrder = await Order.findByIdAndUpdate(
      mongoId,
      {
        printDate: new Date(),
        $inc: { printCount: 1 },
      },
      { new: true } // ‚≠êÔ∏è L·∫•y b·∫£n m·ªõi nh·∫•t
    );

    const logMsg = isDuplicate ? "In h√≥a ƒë∆°n B·∫¢N SAO th√†nh c√¥ng" : "In h√≥a ƒë∆°n th√†nh c√¥ng, ƒë√£ tr·ª´ stock";
    console.log(`${logMsg} cho ${order._id}, S·ªë l·∫ßn in hi·ªán t·∫°i: ${updatedOrder.printCount}`);
    res.json({
      message: `${logMsg}, printCount: ${updatedOrder.printCount}`,
      bill: bill,
      orderId: order._id,
    });
  } catch (err) {
    console.error("L·ªói in h√≥a ƒë∆°n:", err.message);
    res.status(500).json({ message: "L·ªói server khi in h√≥a ƒë∆°n: " + err.message });
  }
};

const vietqrReturn = (req, res) => {
  console.log("‚úÖ Ng∆∞·ªùi d√πng quay l·∫°i sau khi thanh to√°n th√†nh c√¥ng");
  return res.status(200).json({
    message: "Thanh to√°n th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng.",
    query: req.query, // PayOS c√≥ th·ªÉ g·ª≠i k√®m orderCode, amount,...
  });
};

const vietqrCancel = (req, res) => {
  console.log("‚ùå Ng∆∞·ªùi d√πng h·ªßy thanh to√°n ho·∫∑c l·ªói");
  return res.status(400).json({
    message: "Thanh to√°n b·ªã h·ªßy ho·∫∑c kh√¥ng th√†nh c√¥ng.",
    query: req.query,
  });
};

const getOrderById = async (req, res) => {
  try {
    const { orderId } = req.params;
    const order = await Order.findById(orderId).populate("storeId", "name").populate("employeeId", "fullName").lean();

    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n ho·∫∑c H√≥a ƒë∆°n kh√¥ng t·ªìn t·∫°i" });
    }

    const items = await OrderItem.find({ orderId: order._id }).populate("productId", "name sku price").lean();

    const enrichedOrder = {
      ...order,
      items: items.map((item) => ({
        ...item,
        productName: item.productId?.name || "N/A",
        productSku: item.productId?.sku || "N/A",
      })),
    };
    res.json({ message: "L·∫•y h√≥a ƒë∆°n th√†nh c√¥ng", order: enrichedOrder });
  } catch (err) {
    console.error("L·ªói l·∫•y h√≥a ƒë∆°n:", err.message);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// fix refundOrder: query OrderItem ƒë·ªÉ l·∫•y items, loop c·ªông stock, populate product name cho log
const refundOrder = async (req, res) => {
  try {
    const { orderId: mongoId } = req.params; // L·∫•y _id t·ª´ params
    const { employeeId, refundReason } = req.body; // Body: employeeId + l√Ω do ho√†n

    // Ki·ªÉm tra nh√¢n vi√™n
    const employee = await Employee.findById(employeeId);
    if (!employee) return res.status(400).json({ message: "Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i" });

    // Ki·ªÉm tra ƒë∆°n h√†ng
    const order = await Order.findById(mongoId).populate("employeeId", "fullName");
    if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    if (order.status !== "paid") return res.status(400).json({ message: "Ch·ªâ ho√†n ƒë∆°n ƒë√£ thanh to√°n" });

    const files = req.files || []; // Files t·ª´ middleware upload.array("files", 5)
    const evidenceMedia = []; // M·∫£ng media upload Cloudinary

    // Upload l·∫ßn l∆∞·ª£t t·ª´ng file l√™n Cloudinary (d√πng Promise ƒë·ªÉ ƒë·ª£i xong)
    for (const file of files) {
      const resourceType = file.mimetype.startsWith("video") ? "video" : "image"; // X√°c ƒë·ªãnh type image/video

      const result = await new Promise((resolve, reject) => {
        const uploadStream = cloudinary.uploader.upload_stream(
          {
            folder: `refunds/${mongoId}`, // Folder Cloudinary theo orderId
            resource_type: resourceType, // Type image/video
          },
          (err, result) => {
            if (err) reject(err); // Reject n·∫øu upload fail
            else resolve(result); // Resolve result {secure_url, public_id}
          }
        );
        uploadStream.end(file.buffer); // K·∫øt th√∫c stream v·ªõi buffer file
      });

      evidenceMedia.push({
        url: result.secure_url, // URL an to√†n HTTPS
        public_id: result.public_id, // ID Cloudinary ƒë·ªÉ x√≥a sau n·∫øu c·∫ßn
        type: resourceType, // Type image/video
      });
    }

    // T·∫°o b·∫£n ghi refund
    const refund = await OrderRefund.create({
      orderId: mongoId,
      refundedBy: employeeId, // Ref employee ho√†n h√†ng
      refundedAt: new Date(), // Th·ªùi gian ho√†n
      refundTransactionId: null, // Tx ref n·∫øu c√≥ (sau th√™m)
      refundReason, // L√Ω do ho√†n t·ª´ body
      evidenceMedia, // M·∫£ng media upload
    });

    // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
    order.status = "refunded"; // Update status ho√†n
    order.refundId = refund._id; // Ref refund record
    await order.save(); // Save DB

    // C·ªông l·∫°i stock t·ª´ OrderItem (query items thay v√¨ order.items undefined)
    const items = await OrderItem.find({ orderId: mongoId }).populate("productId", "name"); // Query OrderItem + populate product name cho log
    const session = await mongoose.startSession(); // Session atomic c·ªông stock
    session.startTransaction();
    try {
      for (const item of items) {
        // Loop items t·ª´ OrderItem
        const prod = await Product.findById(item.productId._id).session(session); // Ref productId sau populate
        if (prod) {
          prod.stock_quantity += item.quantity; // C·ªông stock l·∫°i (inc positive)
          await prod.save({ session });
          console.log(`C·ªông stock ho√†n h√†ng th√†nh c√¥ng cho ${prod.name}: +${item.quantity}`);
        }
      }
      await session.commitTransaction(); // Commit atomic
      session.endSession();
    } catch (stock_err) {
      await session.abortTransaction(); // Rollback n·∫øu c·ªông stock fail
      session.endSession();
      console.error("L·ªói c·ªông stock ho√†n h√†ng:", stock_err.message);
      throw new Error("L·ªói c·ªông stock: " + stock_err.message);
    }

    res.status(200).json({
      message: "Ho√†n h√†ng th√†nh c√¥ng (n·ªôi b·ªô)",
      refund, // Refund record
      order, // Order updated
    });
  } catch (err) {
    console.error("L·ªói refund:", err.message);
    res.status(500).json({ message: "L·ªói khi ho√†n h√†ng", error: err.message });
  }
};

module.exports = { createOrder, setPaidCash, printBill, vietqrReturn, vietqrCancel, getOrderById, refundOrder };