// controllers/customerController.js
const Customer = require("../../models/Customer");
const Order = require("../../models/Order"); // ƒê·ªÉ check Order ref tr∆∞·ªõc x√≥a m·ªÅm

// POST /api/customers - T·∫°o m·ªõi kh√°ch h√†ng
// Body: { name, phone, address?, note?, storeId? }
const createCustomer = async (req, res) => {
  try {
    const { name, phone, address = "", note = "" } = req.body;

    // Try to get storeId in this order:
    // 1) req.store (set by checkStoreAccess middleware)
    // 2) req.body.storeId (frontend provided)
    // 3) req.user.currentStore (if you store it on user)
    const storeFromReq =
      req.store && (req.store._id || req.store.id)
        ? req.store._id || req.store.id
        : null;
    const storeFromBody = req.body.storeId || null;
    const storeFromUser =
      req.user && (req.user.currentStore || req.user.storeId)
        ? req.user.currentStore || req.user.storeId
        : null;

    const storeId = storeFromReq || storeFromBody || storeFromUser || null;

    // Debug log to help trace problems
    console.log(
      "createCustomer - req.user:",
      req.user
        ? { id: req.user._id || req.user.id, username: req.user.username }
        : null
    );

    // Basic validation
    if (!name || !name.trim()) {
      return res.status(400).json({ message: "Thi·∫øu t√™n kh√°ch h√†ng" });
    }
    if (!phone || !phone.trim()) {
      return res.status(400).json({ message: "Thi·∫øu s·ªë ƒëi·ªán tho·∫°i" });
    }
    if (!storeId) {
      return res
        .status(400)
        .json({ message: "Thi·∫øu storeId (kh√¥ng x√°c ƒë·ªãnh c·ª≠a h√†ng hi·ªán h√†nh)" });
    }

    const trimmedPhone = phone.trim();

    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i (kh√¥ng t√≠nh b·∫£n ghi ƒë√£ x√≥a m·ªÅm) trong c√πng store
    const existing = await Customer.findOne({
      phone: trimmedPhone,
      storeId: storeId,
      isDeleted: { $ne: true },
    });
    if (existing) {
      return res
        .status(400)
        .json({ message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i trong c·ª≠a h√†ng n√†y" });
    }

    // T·∫°o object m·ªõi, g·∫Øn storeId v√† creator n·∫øu c·∫ßn
    const newCustomer = new Customer({
      name: name.trim(),
      phone: trimmedPhone,
      address: address.trim(),
      note: note.trim(),
      storeId: storeId,
      isDeleted: false,
      createdBy: req.user ? req.user._id || req.user.id : undefined,
    });

    await newCustomer.save();

    const created = await Customer.findById(newCustomer._id).lean();

    console.log(
      `T·∫°o m·ªõi kh√°ch h√†ng th√†nh c√¥ng: ${created.name} (${created.phone}), storeId=${storeId}`
    );
    return res
      .status(201)
      .json({ message: "T·∫°o kh√°ch h√†ng th√†nh c√¥ng", customer: created });
  } catch (err) {
    console.error("L·ªói khi t·∫°o kh√°ch h√†ng:", err);
    return res.status(500).json({ message: "L·ªói server khi t·∫°o kh√°ch h√†ng" });
  }
};

// GET /api/customers/search - T√¨m ki·∫øm kh√°ch h√†ng theo phone (exact) ho·∫∑c name (fuzzy)
// http://localhost:9999/api/customers/search?query=0987654321&limit=5
const searchCustomers = async (req, res) => {
  try {
    const { query, limit = 10 } = req.query; // Query string (phone/name), limit default 10
    if (!query) {
      return res.status(400).json({ message: "Thi·∫øu query t√¨m ki·∫øm" });
    }

    console.log(`Query search: "${query}", limit: ${limit}`); // Log query ƒë·ªÉ debug

    // Search exact phone ($eq) + fuzzy name ($regex 'i'), filter isDeleted: { $ne: true } match missing field
    const searchQuery = {
      isDeleted: { $ne: true }, // Ko true (bao g·ªìm missing field default false)
    };
    if (query.length >= 10) {
      // Gi·∫£ s·ª≠ phone VN 10 s·ªë, ∆∞u ti√™n exact match phone
      searchQuery.phone = query.trim(); // Exact phone = query (ko regex, match full)
    } else {
      searchQuery.$or = [
        { phone: { $regex: query, $options: "i" } }, // Phone fuzzy n·∫øu query ng·∫Øn
        { name: { $regex: query, $options: "i" } }, // Name fuzzy case-insensitive
      ];
    }

    console.log("Search query object:", JSON.stringify(searchQuery, null, 2)); // Log full query ƒë·ªÉ debug

    const customers = await Customer.find(searchQuery)
      .limit(parseInt(limit))
      .sort({ createdAt: -1 }) // M·ªõi nh·∫•t tr∆∞·ªõc
      .lean(); // Plain object nhanh

    // Log DB count ƒë·ªÉ debug (t·ªïng active customers)
    const totalActive = await Customer.countDocuments({
      isDeleted: { $ne: true },
    }); // Ko true (missing ok)
    // Log raw document match phone exact ƒë·ªÉ debug
    const rawPhoneMatch = await Customer.findOne({
      phone: query.trim(),
      isDeleted: { $ne: true },
    }).lean();
    console.log(
      `T·ªïng active customers DB: ${totalActive}, search k·∫øt qu·∫£: ${customers.length}, raw phone match:`,
      JSON.stringify(rawPhoneMatch, null, 2)
    ); // Log raw ƒë·ªÉ xem phone/isDeleted

    res.json({ message: "T√¨m ki·∫øm th√†nh c√¥ng", customers });
  } catch (err) {
    console.error("L·ªói t√¨m ki·∫øm kh√°ch h√†ng:", err.message);
    res.status(500).json({ message: "L·ªói server khi t√¨m ki·∫øm kh√°ch h√†ng" });
  }
};

// PUT /api/customers/:id - Ch·ªânh s·ª≠a th√¥ng tin kh√°ch h√†ng (name/phone, unique phone)
const updateCustomer = async (req, res) => {
  try {
    const { id } = req.params; // ID kh√°ch h√†ng t·ª´ params
    const { name, phone, address, note } = req.body; // Input fields (optional)

    const customer = await Customer.findById(id);
    if (!customer || customer.isDeleted) {
      return res.status(404).json({ message: "Kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    // Validate unique phone n·∫øu thay ƒë·ªïi
    if (phone && phone.trim() !== customer.phone) {
      const existing = await Customer.findOne({
        phone: phone.trim(),
        _id: { $ne: id },
      });
      if (existing && !existing.isDeleted) {
        return res.status(400).json({ message: "S·ªë phone ƒë√£ t·ªìn t·∫°i" });
      }
    }

    // Update fields
    if (name) customer.name = name.trim();
    if (phone) customer.phone = phone.trim();
    if (address !== undefined) customer.address = (address || "").trim();
    if (note !== undefined) customer.note = (note || "").trim();

    await customer.save();

    // Populate ƒë·ªÉ return full
    const updatedCustomer = await Customer.findById(id).lean();
    console.log(`C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng: ${customer.name}`);
    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", customer: updatedCustomer });
  } catch (err) {
    console.error("L·ªói c·∫≠p nh·∫≠t kh√°ch h√†ng:", err.message);
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t kh√°ch h√†ng" });
  }
};

// DELETE /api/customers/:id - X√≥a m·ªÅm kh√°ch h√†ng (set isDeleted true, check ko c√≥ Order pending)
const softDeleteCustomer = async (req, res) => {
  try {
    const { id } = req.params; // ID kh√°ch h√†ng t·ª´ params

    const customer = await Customer.findById(id);
    if (!customer || customer.isDeleted) {
      return res.status(404).json({ message: "Kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    // Check ko c√≥ Order pending/refunded (an to√†n, ko x√≥a n·∫øu c√≥ Order active)
    const activeOrders = await Order.find({
      customer: id,
      status: { $in: ["pending", "refunded"] },
    });
    if (activeOrders.length > 0) {
      return res
        .status(400)
        .json({ message: "Kh√¥ng th·ªÉ x√≥a kh√°ch h√†ng c√≥ ƒë∆°n h√†ng ƒëang x·ª≠ l√Ω" });
    }

    customer.isDeleted = true; // X√≥a m·ªÅm
    await customer.save();

    console.log(`X√≥a m·ªÅm kh√°ch h√†ng th√†nh c√¥ng: ${customer.name}`);
    res.json({ message: "X√≥a kh√°ch h√†ng th√†nh c√¥ng" });
  } catch (err) {
    console.error("L·ªói x√≥a kh√°ch h√†ng:", err.message);
    res.status(500).json({ message: "L·ªói server khi x√≥a kh√°ch h√†ng" });
  }
};

// GET /api/customers/store/:storeId - L·∫•y to√†n b·ªô kh√°ch h√†ng c·ªßa 1 c·ª≠a h√†ng
// GET /api/customers/store/:storeId?page=1&limit=10&query=abc
const getCustomersByStore = async (req, res) => {
  try {
    const { storeId } = req.params;
    const { page = 1, limit = 10, query = "" } = req.query;

    if (!storeId) {
      return res.status(400).json({ message: "Thi·∫øu storeId trong URL" });
    }

    // Chu·∫©n b·ªã b·ªô l·ªçc
    const filter = {
      storeId,
      isDeleted: { $ne: true },
    };

    // N·∫øu c√≥ t·ª´ kh√≥a t√¨m ki·∫øm
    if (query && query.trim() !== "") {
      const q = query.trim();
      filter.$or = [
        { name: { $regex: q, $options: "i" } },
        { phone: { $regex: q, $options: "i" } },
        { address: { $regex: q, $options: "i" } },
        { note: { $regex: q, $options: "i" } },
      ];
    }

    // T·ªïng s·ªë k·∫øt qu·∫£
    const total = await Customer.countDocuments(filter);

    // L·∫•y danh s√°ch kh√°ch h√†ng c√≥ ph√¢n trang
    const customers = await Customer.find(filter)
      .sort({ createdAt: -1 })
      .skip((page - 1) * limit)
      .limit(Number(limit))
      .lean();

    res.json({
      message: "L·∫•y danh s√°ch kh√°ch h√†ng th√†nh c√¥ng",
      page: Number(page),
      limit: Number(limit),
      total,
      count: customers.length,
      customers,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch kh√°ch h√†ng theo store:", err);
    res
      .status(500)
      .json({ message: "L·ªói server khi l·∫•y danh s√°ch kh√°ch h√†ng" });
  }
};

module.exports = {
  searchCustomers,
  updateCustomer,
  softDeleteCustomer,
  createCustomer,
  getCustomersByStore, // üëà th√™m d√≤ng n√†y
};
