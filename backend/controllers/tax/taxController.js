// controllers/taxController.js
const mongoose = require("mongoose");
const PDFDocument = require("pdfkit");
const Order = require("../../models/Order");
const TaxDeclaration = require("../../models/TaxDeclaration");
const logActivity = require("../../utils/logActivity");
const { periodToRange } = require("../../utils/period");
const { Parser } = require("json2csv");

const parseDecimal = (v) => mongoose.Types.Decimal128.fromString(Number(v || 0).toFixed(2));
const decimalToString = (d) => (d ? d.toString() : "0.00");

function isManagerUser(user) {
  if (!user) return false;
  if (user.isManager) return true;
  if (typeof user.role === "string" && user.role.toLowerCase() === "manager") return true;
  if (Array.isArray(user.roles) && user.roles.includes("manager")) return true;
  return false;
}

// GET /api/tax/preview - Preview doanh thu h·ªá th·ªëng theo k·ª≥ (aggregate Orders paid/printDate)
const previewSystemRevenue = async (req, res) => {
  try {
    const { periodType, periodKey, shopId, monthFrom, monthTo } = req.query; // Params: periodType, periodKey (month/quarter/year), shopId, monthFrom/monthTo (custom)
    if (!periodType || !shopId) {
      return res.status(400).json({ success: false, message: "Thi·∫øu params: periodType, shopId" });
    }

    if (periodType !== "custom" && !periodKey) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu periodKey cho periodType kh√¥ng ph·∫£i custom",
      });
    }

    if (periodType === "custom" && (!monthFrom || !monthTo)) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu monthFrom/monthTo cho periodType custom",
      });
    }

    const { start, end } = periodToRange(periodType, periodKey, monthFrom, monthTo); // G·ªçi utils v·ªõi params t√πy type

    // Aggregate: ch·ªâ c·ªông orders ƒë√£ in (printDate != null) v√† status = "paid", filter storeId n·∫øu c√≥
    const agg = await Order.aggregate([
      {
        $match: {
          printDate: { $gte: start, $lte: end }, // Filter k·ª≥ (UTC consistent)
          status: "paid", // Ch·ªâ ƒë∆°n ƒë√£ thanh to√°n
          ...(shopId && { storeId: new mongoose.Types.ObjectId(shopId) }), // Th√™m 'new' cho ObjectId(shopId) trong $match
        },
      },
      {
        $group: {
          _id: null, // Group all
          totalRevenue: { $sum: { $toDouble: "$totalAmount" } }, // $toDouble convert Decimal128 sang number tr∆∞·ªõc sum
        },
      },
    ]);

    const systemRevenue = agg[0] ? agg[0].totalRevenue.toFixed(2) : "0.00"; // Convert sang string fixed 2 decimal

    res.json({
      success: true,
      systemRevenue, // Doanh thu h·ªá th·ªëng (tham kh·∫£o)
      periodType,
      periodKey,
      shopId,
      monthFrom,
      monthTo,
    });
  } catch (err) {
    console.error("previewSystemRevenue error:", err); // Log debug ti·∫øng Vi·ªát error
    res.status(500).json({ success: false, message: "L·ªói server khi preview doanh thu" });
  }
};
/**
 * CREATE tax declaration
 * POST /api/tax
 * Body: { shopId, periodType, periodKey, declaredRevenue, createdBy }
 * - N·∫øu ƒë√£ c√≥ b·∫£n g·ªëc c√πng (shopId + periodType + periodKey + isClone:false) => tr·∫£ 409
 */
const createTaxDeclaration = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const shopId = req.body.shopId || req.query.shopId;
    const periodType = req.body.periodType || req.query.periodType;
    let periodKey = req.body.periodKey || req.query.periodKey; // d√πng let v√¨ c√≥ th·ªÉ s·ª≠a gi√° tr·ªã b√™n d∆∞·ªõi
    const declaredRevenue = req.body.declaredRevenue || req.query.declaredRevenue;
    // ‚úÖ N·∫æU l√† custom ‚Üí chuy·ªÉn "YYYY-MM ƒë·∫øn YYYY-MM" th√†nh "YYYY-MM_YYYY-MM"
    if (periodType === "custom" && typeof periodKey === "string" && periodKey.includes("ƒë·∫øn")) {
      const [from, to] = periodKey.split("ƒë·∫øn").map((s) => s.trim());
      periodKey = `${from}_${to}`;
    }

    const createdBy = req.user?._id;

    if (!shopId || !periodType || !periodKey || declaredRevenue == null) {
      await session.abortTransaction();
      session.endSession();
      return res
        .status(400)
        .json({ success: false, message: "Thi·∫øu shopId ho·∫∑c periodType ho·∫∑c periodKey ho·∫∑c declaredRevenue" });
    }

    // Check t·ªìn t·∫°i 'b·∫£n g·ªëc' c√πng k·ª≥: n·∫øu c√≥ -> block (409)
    const existingOriginal = await TaxDeclaration.findOne({
      shopId,
      periodType,
      periodKey,
      isClone: false,
    }).session(session);

    if (existingOriginal) {
      await session.abortTransaction();
      session.endSession();
      return res.status(409).json({
        success: false,
        message: "ƒê√£ t·ªìn t·∫°i t·ªù khai cho k·ª≥ n√†y. Vui l√≤ng c·∫≠p nh·∫≠t t·ªù khai hi·ªán c√≥ ho·∫∑c t·∫°o b·∫£n sao.",
      });
    }

    // T√≠nh systemRevenue b·∫±ng aggregate (ch·ªâ orders printed & paid), N·∫øu l√† custom th√¨ l·∫•y monthFrom, monthTo t·ª´ body ho·∫∑c query
    let monthFrom = req.body.monthFrom || req.query.monthFrom;
    let monthTo = req.body.monthTo || req.query.monthTo;
    const { start, end } =
      periodType === "custom"
        ? periodToRange(periodType, periodKey, monthFrom, monthTo)
        : periodToRange(periodType, periodKey);

    const agg = await Order.aggregate([
      {
        $match: {
          storeId: new mongoose.Types.ObjectId(shopId),
          status: "paid",
          printDate: { $ne: null, $gte: start, $lte: end },
        },
      },
      {
        $group: {
          _id: null,
          total: { $sum: "$totalAmount" },
        },
      },
    ]).session(session);

    const systemRevenueDecimal = agg[0]?.total ? agg[0].total : mongoose.Types.Decimal128.fromString("0.00");

    // Thu·∫ø su·∫•t m·∫∑c ƒë·ªãnh (c√≥ th·ªÉ config per-store sau n√†y)
    const gtgtRate = 1.0; // %
    const tncnRate = 0.5; // %

    const declaredNum = Number(declaredRevenue);
    const gtgtAmount = (declaredNum * gtgtRate) / 100;
    const tncnAmount = (declaredNum * tncnRate) / 100;
    const totalTax = gtgtAmount + tncnAmount;

    // T·∫°o b·∫£n g·ªëc (isClone: false, originalId: null, version:1)
    const doc = await TaxDeclaration.create(
      [
        {
          shopId,
          periodType,
          periodKey,
          systemRevenue: systemRevenueDecimal,
          declaredRevenue: parseDecimal(declaredNum),
          taxRates: { gtgt: gtgtRate, tncn: tncnRate },
          taxAmounts: {
            gtgt: parseDecimal(gtgtAmount),
            tncn: parseDecimal(tncnAmount),
            total: parseDecimal(totalTax),
          },
          createdBy,
          originalId: null,
          isClone: false,
          version: 1,
          status: "saved",
        },
      ],
      { session }
    );

    await session.commitTransaction();
    session.endSession();

    // üìò Ghi log sau khi t·∫°o th√†nh c√¥ng
    await logActivity({
      user: req.user,
      store: { _id: shopId },
      action: "create",
      entity: "TaxDeclaration",
      entityId: doc[0]._id,
      entityName: `${periodType}-${periodKey}`,
      req,
      description: `T·∫°o t·ªù khai thu·∫ø k·ª≥ ${periodType} ${periodKey} cho c·ª≠a h√†ng ${shopId}`,
    });

    return res.status(201).json({
      success: true,
      message: "T·∫°o t·ªù khai th√†nh c√¥ng",
      declaration: doc[0],
    });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error("createTaxDeclaration error:", err.message);
    console.error(err.stack);
    return res.status(500).json({ success: false, message: "L·ªói server khi t·∫°o t·ªù khai" });
  }
};

/**
 * UPDATE tax declaration
 * PUT /api/tax/:id
 * Body: { declaredRevenue } (ch·ªâ cho edit declaredRevenue khi status = saved)
 */
const updateTaxDeclaration = async (req, res) => {
  try {
    const { id } = req.params;
    const { declaredRevenue } = req.body;

    if (declaredRevenue == null) {
      return res.status(400).json({ success: false, message: "Thi·∫øu declaredRevenue" });
    }

    const doc = await TaxDeclaration.findById(id);
    if (!doc) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y t·ªù khai" });

    // Ch·ªâ cho ph√©p ch·ªânh s·ª≠a khi status = 'saved'
    if (doc.status !== "saved") {
      return res.status(400).json({
        success: false,
        message: "Ch·ªâ t·ªù khai tr·∫°ng th√°i 'saved' m·ªõi ƒë∆∞·ª£c ch·ªânh s·ª≠a",
      });
    }

    // Quy·ªÅn: ch·ªâ creator ho·∫∑c manager m·ªõi update (ƒë·ªÉ an to√†n)
    const userId = req.user?._id;
    if (!isManagerUser(req.user) && String(doc.createdBy) !== String(userId)) {
      return res.status(403).json({
        success: false,
        message: "Ch·ªâ ng∆∞·ªùi t·∫°o ho·∫∑c manager m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
      });
    }

    // Recompute tax amounts based on new declaredRevenue
    const declaredNum = Number(declaredRevenue);
    const gtgtAmount = (declaredNum * (doc.taxRates.gtgt || 1.0)) / 100;
    const tncnAmount = (declaredNum * (doc.taxRates.tncn || 0.5)) / 100;
    const totalTax = gtgtAmount + tncnAmount;

    doc.declaredRevenue = parseDecimal(declaredNum);
    doc.taxAmounts.gtgt = parseDecimal(gtgtAmount);
    doc.taxAmounts.tncn = parseDecimal(tncnAmount);
    doc.taxAmounts.total = parseDecimal(totalTax);
    doc.updatedAt = new Date();

    await doc.save();

    // üìò Ghi log sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
    await logActivity({
      user: req.user,
      store: { _id: doc.shopId },
      action: "update",
      entity: "TaxDeclaration",
      entityId: doc._id,
      entityName: `${doc.periodType}-${doc.periodKey}`,
      req,
      description: `C·∫≠p nh·∫≠t doanh thu k√™ khai c·ªßa t·ªù khai thu·∫ø k·ª≥ ${doc.periodType} ${doc.periodKey} cho c·ª≠a h√†ng ${doc.shopId}`,
    });

    return res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t t·ªù khai th√†nh c√¥ng",
      declaration: doc,
    });
  } catch (err) {
    console.error("updateTaxDeclaration error:", err);
    return res.status(500).json({ success: false, message: "L·ªói server khi c·∫≠p nh·∫≠t t·ªù khai" });
  }
};

/**
 * CLONE tax declaration
 * POST /api/tax/:id/clone
 * T·∫°o b·∫£n sao (isClone=true) t·ª´ b·∫£n g·ªëc ho·∫∑c t·ª´ 1 b·∫£n b·∫•t k·ª≥.
 * - version s·∫Ω ƒë∆∞·ª£c set = max(version of same period/shop) + 1
 */
const cloneTaxDeclaration = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const { id } = req.params;
    const source = await TaxDeclaration.findById(id).session(session);
    if (!source) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ success: false, message: "Ngu·ªìn ƒë·ªÉ sao ch√©p kh√¥ng t·ªìn t·∫°i" });
    }

    // T√≠nh version m·ªõi: l·∫•y MAX(version) c√πng shop+period + 1
    const maxVerDoc = await TaxDeclaration.findOne({
      shopId: source.shopId,
      periodType: source.periodType,
      periodKey: source.periodKey,
    })
      .sort({ version: -1 })
      .session(session);

    const newVersion = maxVerDoc ? maxVerDoc.version + 1 : source.version + 1;

    // T·∫°o b·∫£n sao (isClone true)
    const cloneDoc = await TaxDeclaration.create(
      [
        {
          shopId: source.shopId,
          periodType: source.periodType,
          periodKey: source.periodKey,
          systemRevenue: source.systemRevenue,
          declaredRevenue: source.declaredRevenue,
          taxRates: source.taxRates,
          taxAmounts: source.taxAmounts,
          createdBy: req.user?._id,
          originalId: source.originalId ? source.originalId : source._id, // gi·ªØ link v·ªÅ b·∫£n g·ªëc n·∫øu c√≥, n·∫øu kh√¥ng -> source._id
          isClone: true,
          version: newVersion,
          status: "saved",
        },
      ],
      { session }
    );

    await session.commitTransaction();
    session.endSession();

    // üìò Ghi log sau khi t·∫°o th√†nh c√¥ng
    await logActivity({
      user: req.user,
      store: { _id: source.shopId },
      action: "create",
      entity: "TaxDeclaration",
      entityId: cloneDoc[0]._id,
      entityName: `${source.periodType}-${source.periodKey}`,
      req,
      description: `T·∫°o b·∫£n sao t·ªù khai thu·∫ø k·ª≥ ${source.periodType} ${source.periodKey} t·ª´ b·∫£n g·ªëc ${source._id}`,
    });

    return res.status(201).json({
      success: true,
      message: "T·∫°o b·∫£n sao th√†nh c√¥ng",
      declaration: cloneDoc[0],
    });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error("cloneTaxDeclaration error:", err);
    return res.status(500).json({ success: false, message: "L·ªói server khi clone t·ªù khai" });
  }
};

/**
 * DELETE tax declaration
 * DELETE /api/tax/:id
 * Ch·ªâ Manager ƒë∆∞·ª£c x√≥a
 * N·∫øu x√≥a b·∫£n g·ªëc m√† t·ªìn t·∫°i b·∫£n sao -> n√¢ng 1 b·∫£n sao th√†nh b·∫£n g·ªëc (originalId null, isClone false)
 */
const deleteTaxDeclaration = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const { id } = req.params;
    const doc = await TaxDeclaration.findById(id).session(session);
    if (!doc) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y t·ªù khai" });
    }

    // Quy·ªÅn: ch·ªâ manager ƒë∆∞·ª£c x√≥a
    if (!isManagerUser(req.user)) {
      await session.abortTransaction();
      session.endSession();
      return res.status(403).json({ success: false, message: "Ch·ªâ Manager m·ªõi ƒë∆∞·ª£c x√≥a t·ªù khai" });
    }

    // N·∫øu x√≥a b·∫£n g·ªëc (isClone == false), t√¨m 1 b·∫£n sao c√πng k·ª≥ v√† n√¢ng l√™n l√†m g·ªëc
    if (!doc.isClone) {
      // t√¨m b·∫£n sao c√πng shop + period, version l·ªõn nh·∫•t
      const clone = await TaxDeclaration.findOne({
        shopId: doc.shopId,
        periodType: doc.periodType,
        periodKey: doc.periodKey,
        isClone: true,
      })
        .sort({ version: -1 })
        .session(session);

      if (clone) {
        // N√¢ng b·∫£n sao l√™n l√†m g·ªëc
        clone.originalId = null;
        clone.isClone = false;
        // gi·ªØ version nh∆∞ c≈© ho·∫∑c reset? Ch√∫ng ta gi·ªØ version value
        await clone.save({ session });
        // ghi log nh·∫≠t k√Ω ho·∫°t ƒë·ªông
        await logActivity({
          user: req.user,
          store: { _id: doc.shopId },
          action: "restore",
          entity: "TaxDeclaration",
          entityId: clone._id,
          entityName: `${clone.periodType}-${clone.periodKey}`,
          req,
          description: `T·ª± ƒë·ªông n√¢ng b·∫£n sao t·ªù khai thu·∫ø phi√™n b·∫£n ${clone.version} l√™n l√†m b·∫£n g·ªëc sau khi x√≥a b·∫£n g·ªëc`,
        });
      }
    }

    await doc.deleteOne({ session }); //T·ª´ Mongoose v7 tr·ªü l√™n, ph∆∞∆°ng th·ª©c .remove() ƒë√£ b·ªã lo·∫°i b·ªè, ph·∫£i d√πng deleteOne()

    await session.commitTransaction();
    session.endSession();

    // üìò Ghi log sau khi x√≥a th√†nh c√¥ng
    await logActivity({
      user: req.user,
      store: { _id: doc.shopId },
      action: "delete",
      entity: "TaxDeclaration",
      entityId: doc._id,
      entityName: `${doc.periodType}-${doc.periodKey}`,
      req,
      description: `X√≥a t·ªù khai thu·∫ø k·ª≥ ${doc.periodType} ${doc.periodKey} c·ªßa c·ª≠a h√†ng ${doc.shopId}`,
    });

    return res.json({ success: true, message: "X√≥a t·ªù khai th√†nh c√¥ng" });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error("deleteTaxDeclaration error:", err);
    return res.status(500).json({ success: false, message: "L·ªói server khi x√≥a t·ªù khai" });
  }
};

/**
 * LIST tax declarations
 * GET /api/taxs?shopId=...&page=1&limit=20
 * C√≥ th·ªÉ filter theo periodType/periodKey n·∫øu mu·ªën
 */
const listDeclarations = async (req, res) => {
  try {
    const { shopId, periodType, periodKey, page = 1, limit = 20 } = req.query;
    // Ki·ªÉm tra b·∫Øt bu·ªôc
    if (!shopId) {
      console.warn("‚ö†Ô∏è Thi·∫øu shopId trong query");
      return res.status(400).json({ success: false, message: "Thi·∫øu shopId" });
    }
    // Ki·ªÉm tra ObjectId h·ª£p l·ªá
    const isValidId = mongoose.Types.ObjectId.isValid(shopId);

    if (!isValidId) {
      return res.status(400).json({
        success: false,
        message: `shopId kh√¥ng h·ª£p l·ªá: ${shopId}`,
      });
    }
    // T·∫°o query object
    const q = { shopId: new mongoose.Types.ObjectId(shopId) };

    if (periodType) q.periodType = periodType;
    if (periodKey) q.periodKey = periodKey;

    // Th·ª±c thi query
    const docs = await TaxDeclaration.find(q)
      .populate("createdBy", "fullName email")
      .sort({ createdAt: -1 })
      .skip((Number(page) - 1) * Number(limit))
      .limit(Number(limit))
      .lean();

    // Format tr·∫£ v·ªÅ: chuy·ªÉn Decimal128 sang string
    const data = docs.map((d) => ({
      ...d,
      systemRevenue: decimalToString(d.systemRevenue),
      declaredRevenue: decimalToString(d.declaredRevenue),
      taxAmounts: {
        gtgt: decimalToString(d.taxAmounts?.gtgt),
        tncn: decimalToString(d.taxAmounts?.tncn),
        total: decimalToString(d.taxAmounts?.total),
      },
    }));

    return res.json({ success: true, data });
  } catch (err) {
    console.error("‚ùå listDeclarations error:", err);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y danh s√°ch t·ªù khai",
      error: err.message, // th√™m log l·ªói chi ti·∫øt ra response n·∫øu c·∫ßn debug
    });
  }
};

/**
 * EXPORT tax declaration -> CSV or PDF
 * GET /api/tax/:id/export?format=csv
 */
const exportDeclaration = async (req, res) => {
  try {
    const { id } = req.params;
    const format = (req.query.format || "pdf").toLowerCase();

    const doc = await TaxDeclaration.findById(id).populate("createdBy", "fullName email");
    if (!doc) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y t·ªù khai" });

    const payload = {
      shopId: String(doc.shopId),
      periodType: doc.periodType,
      periodKey: doc.periodKey,
      version: doc.version,
      originalId: doc.originalId ? String(doc.originalId) : null,
      isClone: !!doc.isClone,
      systemRevenue: decimalToString(doc.systemRevenue),
      declaredRevenue: decimalToString(doc.declaredRevenue),
      gtgtRate: doc.taxRates.gtgt,
      tncnRate: doc.taxRates.tncn,
      gtgtAmount: decimalToString(doc.taxAmounts.gtgt),
      tncnAmount: decimalToString(doc.taxAmounts.tncn),
      totalTax: decimalToString(doc.taxAmounts.total),
      createdAt: doc.createdAt,
      createdBy: doc.createdBy?.fullName || "",
      status: doc.status,
    };

    if (format === "csv") {
      const fields = Object.keys(payload);
      const parser = new Parser({ fields });
      const csv = parser.parse([payload]);
      res.header("Content-Type", "text/csv");
      res.attachment(`tax-declaration-${doc.periodKey}-v${doc.version}.csv`);
      res.send(csv);
    } else {
      const pdf = new PDFDocument({ margin: 40 });
      res.setHeader("Content-Type", "application/pdf");
      res.setHeader("Content-Disposition", `attachment; filename=tax-declaration-${doc.periodKey}-v${doc.version}.pdf`);

      pdf.pipe(res);

      pdf.fontSize(18).text("T·ªú KHAI THU·∫æ - SmartRetail", { align: "center" });
      pdf.moveDown();
      pdf.fontSize(12).text(`K·ª≥ khai: ${doc.periodKey} (${doc.periodType})`);
      pdf.text(`Version: v${doc.version}`);
      pdf.text(`B·∫£n sao: ${doc.isClone ? "C√≥" : "Kh√¥ng"}`);
      pdf.text(`Tr·∫°ng th√°i: ${doc.status}`);
      pdf.text(`Ng∆∞·ªùi l·∫≠p: ${payload.createdBy}`);
      pdf.text(`Ng√†y l·∫≠p: ${new Date(payload.createdAt).toLocaleString("vi-VN")}`);
      pdf.moveDown();

      pdf.text(`Doanh thu h·ªá th·ªëng: ${payload.systemRevenue} VND`);
      pdf.text(`Doanh thu khai b√°o: ${payload.declaredRevenue} VND`);
      pdf.text(`Thu·∫ø GTGT (${payload.gtgtRate}%): ${payload.gtgtAmount} VND`);
      pdf.text(`Thu·∫ø TNCN (${payload.tncnRate}%): ${payload.tncnAmount} VND`);
      pdf.moveDown();
      pdf.fontSize(14).text(`T·ªîNG THU·∫æ PH·∫¢I N·ªòP: ${payload.totalTax} VND`, { align: "left" });

      pdf.end();
    }
  } catch (err) {
    console.error("exportDeclaration error:", err);
    return res.status(500).json({ success: false, message: "L·ªói server khi export t·ªù khai" });
  }
};

module.exports = {
  previewSystemRevenue,
  createTaxDeclaration,
  updateTaxDeclaration,
  cloneTaxDeclaration,
  deleteTaxDeclaration,
  listDeclarations,
  exportDeclaration,
};
