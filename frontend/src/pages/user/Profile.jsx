// src/pages/user/Profile.jsx
import React, { useState, useEffect } from "react";
import { Form, Input, Button, Card, Alert, Spin, Row, Col, Badge, Divider } from "antd";
import { SaveOutlined, LockOutlined, MailOutlined } from "@ant-design/icons";
import axios from "axios";
import Swal from "sweetalert2";
import { useAuth } from "../../context/AuthContext";
import Layout from "../../components/Layout";

const { useForm } = Form;

export default function Profile() {
  const { token, user } = useAuth(); // üëà L·∫•y token/user t·ª´ context (user c√≥ username/email/role)
  const [form] = useForm();
  const [passForm] = useForm(); // üëà Form ri√™ng cho ƒë·ªïi pass
  const [loading, setLoading] = useState(true); // üëà Loading chung
  const [savingInfo, setSavingInfo] = useState(false); // üëà Loading save info
  const [savingPass, setSavingPass] = useState(false); // üëà Loading save pass
  const [error, setError] = useState(null); // üëà L·ªói chung
  const [otpSent, setOtpSent] = useState(false); // üëà Tr·∫°ng th√°i g·ª≠i OTP th√†nh c√¥ng
  //ƒë·∫øm ng∆∞·ª£c g·ª≠i l·∫°i otp, tr√°nh spam
  const otpExpireMinutes = Number(import.meta.env.VITE_OTP_EXPIRE_MINUTES || 5);
  const [timer, setTimer] = useState(0);

  // üëà Load info user v√†o form khi mount
  useEffect(() => {
    if (user) {
      form.setFieldsValue({
        username: user.username || "",
        email: user.email || "",
        phone: user.phone || "",
        role: user.role || "",
        isVerified: user.isVerified || "",
        isDeleted: user.isDeleted || "",
      });
      setLoading(false);
    } else {
      setLoading(false);
    }
  }, [user, form]);

  useEffect(() => {
    if (timer <= 0) return;
    const id = setInterval(() => setTimer((t) => Math.max(0, t - 1)), 1000);
    return () => clearInterval(id);
  }, [timer]);

  const formatTime = (sec) => {
    if (!sec || sec <= 0) return "00:00";
    return `${String(Math.floor(sec / 60)).padStart(2, "0")}:${String(sec % 60).padStart(2, "0")}`;
  };

  // üëà X·ª≠ l√Ω save info c√° nh√¢n (POST /profile, validate unique)
  const onFinishInfo = async (values) => {
    setSavingInfo(true);
    setError(null);
    try {
      const response = await axios.put("http://localhost:9999/api/users/profile", values, {
        headers: { Authorization: `Bearer ${token}` },
      });
      console.log("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng:", response.data.user);
      // üëà Swal.fire success ƒë·∫πp (icon xanh, animation m∆∞·ª£t)
      Swal.fire({
        title: "C·∫≠p nh·∫≠t th√†nh c√¥ng",
        text: "Th√¥ng tin c√° nh√¢n ƒë√£ ƒë∆∞·ª£c l∆∞u!",
        icon: "success",
        confirmButtonText: "OK",
        timer: 3000, // T·ª± ƒë√≥ng sau 3s
      });
      // Reload user t·ª´ context n·∫øu c·∫ßn (gi·∫£ s·ª≠ useAuth refetch)
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t th√¥ng tin:", err.response?.data?.message || err.message);
      setError(err.response?.data?.message || "L·ªói c·∫≠p nh·∫≠t th√¥ng tin");
      // üëà Swal.fire error ƒë·∫πp (icon ƒë·ªè, animation)
      Swal.fire({
        title: "L·ªói c·∫≠p nh·∫≠t",
        text: err.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin",
        icon: "error",
        confirmButtonText: "OK",
        timer: 4000,
      });
    } finally {
      setSavingInfo(false);
    }
  };

  // üëà X·ª≠ l√Ω g·ª≠i OTP ƒë·ªïi pass (POST /password/send-otp)
  // üëà X·ª≠ l√Ω g·ª≠i OTP ƒë·ªïi pass (POST /password/send-otp)
  const sendOTP = async () => {
    if (timer > 0) return;

    setSavingPass(true);
    setError(null);

    try {
      const email = form.getFieldValue("email");
      if (!email) throw new Error("C·∫ßn email ƒë·ªÉ g·ª≠i OTP, c·∫≠p nh·∫≠t th√¥ng tin tr∆∞·ªõc");

      const res = await axios.post(
        "http://localhost:9999/api/users/password/send-otp",
        { email },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setOtpSent(true);
      setTimer(60 * otpExpireMinutes); // b·∫Øt ƒë·∫ßu countdown

      Swal.fire({
        title: "G·ª≠i OTP th√†nh c√¥ng",
        text: res.data?.message || "Ki·ªÉm tra email ƒë·ªÉ l·∫•y m√£ OTP (h·∫øt h·∫°n sau 5 ph√∫t)",
        icon: "success",
        confirmButtonText: "OK",
        timer: 4000,
      });
    } catch (err) {
      console.error("L·ªói g·ª≠i OTP:", err.response?.data?.message || err.message);
      setOtpSent(false);
      setError(err.response?.data?.message || err.message || "Kh√¥ng th·ªÉ g·ª≠i OTP");

      Swal.fire({
        title: "L·ªói g·ª≠i OTP",
        text: err.response?.data?.message || "Kh√¥ng th·ªÉ g·ª≠i OTP",
        icon: "error",
        confirmButtonText: "OK",
        timer: 4000,
      });
    } finally {
      setSavingPass(false);
    }
  };

  // üëà X·ª≠ l√Ω ƒë·ªïi pass (POST /password/change, validate OTP + new pass match length 6)
  const onFinishPass = async (values) => {
    setSavingPass(true);
    setError(null);
    try {
      if (values.newPassword !== values.confirmPassword) {
        setError("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp");
        return;
      }
      if (values.newPassword.length < 6) {
        setError("M·∫≠t kh·∫©u m·ªõi ph·∫£i √≠t nh·∫•t 6 k√Ω t·ª±");
        return;
      }
      const payload = {
        password: values.newPassword,
        confirmPassword: values.confirmPassword,
        otp: values.otp,
      };
      const response = await axios.post("http://localhost:9999/api/users/password/change", payload, {
        headers: { Authorization: `Bearer ${token}` },
      });
      console.log("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng:", response.data.message);
      passForm.resetFields();
      setOtpSent(false);
      // üëà Swal.fire success ƒë·ªïi pass
      Swal.fire({
        title: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng",
        text: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!",
        icon: "success",
        confirmButtonText: "OK",
        timer: 3000,
      });
    } catch (err) {
      console.error("L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", err.response?.data?.message || err.message);
      setError(err.response?.data?.message || "L·ªói ƒë·ªïi m·∫≠t kh·∫©u");
      // üëà Swal.fire error ƒë·ªïi pass
      Swal.fire({
        title: "L·ªói ƒë·ªïi m·∫≠t kh·∫©u",
        text: err.response?.data?.message || "Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u",
        icon: "error",
        confirmButtonText: "OK",
        timer: 4000,
      });
    } finally {
      setSavingPass(false);
    }
  };

  if (!user) {
    return (
      <Layout>
        <div className="p-6 max-w-4xl mx-auto">
          <Alert message="L·ªói" description="Ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem h·ªì s∆°." type="error" />
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <Card
        title={
          <div className="flex items-center gap-3">
            <SaveOutlined className="text-green-600 text-xl" />
            <span className="text-3xl font-bold text-gray-800">H·ªì S∆° C√° Nh√¢n</span>
          </div>
        }
        className="shadow-xl border-0 rounded-2xl bg-gradient-to-br from-blue-50 to-indigo-100"
      >
        {loading ? (
          <div className="flex justify-center items-center h-64">
            <Spin size="large" tip="ƒêang t·∫£i d·ªØ li·ªáu h·ªì s∆°..." />
          </div>
        ) : (
          <>
            {/* üëà Th√¥ng b√°o l·ªói chung */}
            {error && (
              <Alert
                message="L·ªói"
                description={error}
                type="error"
                showIcon
                className="mb-6"
                closable
                onClose={() => setError(null)}
              />
            )}

            {/* üëà Form th√¥ng tin c√° nh√¢n */}
            <Form form={form} name="profile-form" onFinish={onFinishInfo} layout="vertical" className="space-y-4 mb-8">
              <Card
                title={<span className="font-semibold text-gray-800">Th√¥ng Tin C√° Nh√¢n</span>}
                className="shadow-lg border-0 rounded-xl bg-white"
              >
                <Row gutter={24}>
                  {/* Username */}
                  <Col span={8}>
                    <Form.Item
                      name="username"
                      label="T√™n ƒëƒÉng nh·∫≠p"
                      rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" }]}
                    >
                      <Input
                        placeholder="T√™n ƒëƒÉng nh·∫≠p"
                        disabled
                        className="!py-2 !px-3 !text-lg rounded-lg border border-gray-300 bg-gray-100 cursor-not-allowed"
                      />
                    </Form.Item>
                  </Col>

                  {/* Email */}
                  <Col span={8}>
                    <Form.Item name="email" label="Email" rules={[{ type: "email", message: "Email kh√¥ng h·ª£p l·ªá" }]}>
                      <Input
                        placeholder="Email"
                        className="!py-2 !px-3 !text-lg rounded-lg border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-300"
                      />
                    </Form.Item>
                  </Col>

                  {/* Phone */}
                  <Col span={8}>
                    <Form.Item name="phone" label="S·ªë ƒëi·ªán tho·∫°i">
                      <Input
                        placeholder="S·ªë ƒëi·ªán tho·∫°i"
                        className="!py-2 !px-3 !text-lg rounded-lg border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-300"
                      />
                    </Form.Item>
                  </Col>

                  {/* Role */}
                  <Col span={8}>
                    <Form.Item name="role" label="Vai tr√≤">
                      <div className="py-2 px-3 bg-blue-100 rounded-lg inline-flex items-center gap-2 shadow-sm">
                        <span className="w-3 h-3 bg-blue-500 rounded-full"></span>
                        <span className="text-lg font-semibold text-blue-700 tracking-wide">
                          {user?.role === "MANAGER" ? "Qu·∫£n l√Ω" : "Nh√¢n vi√™n"}
                        </span>
                      </div>
                    </Form.Item>
                  </Col>

                  {/* Verified */}
                  <Col span={8}>
                    <Form.Item name="isVerified" label="X√°c th·ª±c Email">
                      <div
                        className={`py-2 px-3 rounded-lg inline-flex items-center gap-2 shadow-sm ${
                          user?.isVerified ? "bg-green-100" : "bg-yellow-100"
                        }`}
                      >
                        <span
                          className={`w-3 h-3 rounded-full ${user?.isVerified ? "bg-green-500" : "bg-yellow-500"}`}
                        ></span>
                        <span
                          className={`text-lg font-semibold tracking-wide ${
                            user?.isVerified ? "text-green-700" : "text-yellow-700"
                          }`}
                        >
                          {user?.isVerified ? "ƒê√£ x√°c th·ª±c" : "Ch∆∞a x√°c th·ª±c"}
                        </span>
                      </div>
                    </Form.Item>
                  </Col>

                  {/* Deleted */}
                  <Col span={8}>
                    <Form.Item name="isDeleted" label="Tr·∫°ng th√°i t√†i kho·∫£n">
                      <div
                        className={`py-2 px-3 rounded-lg inline-flex items-center gap-2 shadow-sm ${
                          user?.isDeleted ? "bg-red-100" : "bg-green-100"
                        }`}
                      >
                        <span
                          className={`w-3 h-3 rounded-full ${user?.isDeleted ? "bg-red-500" : "bg-green-500"}`}
                        ></span>
                        <span
                          className={`text-lg font-semibold tracking-wide ${
                            user?.isDeleted ? "text-red-700" : "text-green-700"
                          }`}
                        >
                          {user?.isDeleted ? "ƒê√£ b·ªã kh√≥a" : "ƒêang ho·∫°t ƒë·ªông"}
                        </span>
                      </div>
                    </Form.Item>
                  </Col>
                </Row>

                <div className="flex justify-end pt-4">
                  <Button
                    type="primary"
                    htmlType="submit"
                    icon={<SaveOutlined />}
                    size="large"
                    loading={savingInfo}
                    className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold px-8 py-2 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 min-w-[120px]"
                  >
                    L∆∞u Th√¥ng Tin
                  </Button>
                </div>
              </Card>
            </Form>

            {/* üëà Section ƒë·ªïi m·∫≠t kh·∫©u */}
            <Card
              title={
                <div className="flex items-center gap-2">
                  <LockOutlined className="text-red-600" />
                  <span className="font-semibold text-gray-800">ƒê·ªïi M·∫≠t Kh·∫©u</span>
                </div>
              }
              className="shadow-lg border-0 rounded-xl bg-white"
            >
              <div className="space-y-4">
                <Button
                  type="dashed"
                  onClick={sendOTP}
                  icon={<MailOutlined />}
                  size="large"
                  disabled={timer > 0 || savingPass}
                  loading={savingPass && !otpSent}
                  className={`w-full py-3 text-lg rounded-lg border-dashed border-gray-300 ${
                    timer > 0 ? "opacity-60 cursor-not-allowed" : "hover:border-blue-500 hover:bg-blue-50"
                  }`}
                >
                  {savingPass
                    ? "ƒêang g·ª≠i..."
                    : timer > 0
                    ? `Ch·ªù g·ª≠i l·∫°i (${formatTime(timer)})`
                    : otpSent
                    ? "G·ª≠i OTP m·ªõi"
                    : "G·ª≠i OTP qua email"}
                </Button>

                {otpSent && (
                  <Form
                    form={passForm}
                    name="password-form"
                    onFinish={onFinishPass}
                    layout="vertical"
                    className="space-y-4"
                  >
                    <Row gutter={24}>
                      <Col span={12}>
                        <Form.Item
                          name="otp"
                          label="M√£ OTP"
                          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m√£ OTP" }]}
                        >
                          <Input
                            placeholder="Nh·∫≠p m√£ OTP t·ª´ email"
                            maxLength={6}
                            className="!py-2 !px-3 !text-lg rounded-lg border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-300"
                          />
                        </Form.Item>
                      </Col>
                      <Col span={12}>
                        <Form.Item
                          name="newPassword"
                          label="M·∫≠t kh·∫©u m·ªõi"
                          rules={[
                            { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi" },
                            { min: 6, message: "M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 6 k√Ω t·ª±" },
                          ]}
                        >
                          <Input.Password
                            placeholder="M·∫≠t kh·∫©u m·ªõi (√≠t nh·∫•t 6 k√Ω t·ª±)"
                            className="!py-2 !px-3 !text-lg rounded-lg border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-300"
                          />
                        </Form.Item>
                      </Col>
                    </Row>

                    <Row gutter={24}>
                      <Col span={12}>
                        <Form.Item
                          name="confirmPassword"
                          label="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
                          rules={[{ required: true, message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u" }]}
                        >
                          <Input.Password
                            placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                            className="!py-2 !px-3 !text-lg rounded-lg border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-300"
                          />
                        </Form.Item>
                      </Col>
                    </Row>

                    <div className="flex justify-end pt-4">
                      <Button
                        type="primary"
                        htmlType="submit"
                        icon={<SaveOutlined />}
                        size="large"
                        loading={savingPass}
                        className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold px-8 py-2 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 min-w-[120px]"
                      >
                        ƒê·ªïi M·∫≠t Kh·∫©u
                      </Button>
                    </div>
                  </Form>
                )}
              </div>
            </Card>
          </>
        )}
      </Card>
    </Layout>
  );
}
