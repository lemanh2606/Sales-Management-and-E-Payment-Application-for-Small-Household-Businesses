// src/App.jsx
import React from "react";
import { Routes, Route, Navigate } from "react-router-dom";
import RegisterPage from "./pages/auth/RegisterPage";
import VerifyOtpPage from "./pages/auth/VerifyOtpPage";
import LoginPage from "./pages/auth/LoginPage";
import DashboardPage from "./pages/DashboardPage";
import SelectStorePage from "./pages/store/SelectStorePage";
import SupplierListPage from "./pages/supplier/SupplierListPage";
import ProductListPage from "./pages/product/ProductListPage";
import ForgotPassword from "./pages/auth/ForgotPassword";
import Profile from "./pages/user/Profile";
import LoyaltySetting from "./pages/loyalty/LoyaltySetting";

// üëâ Customer page b·∫°n ƒë√£ t·∫°o
import CustomerListPage from "./pages/customer/CustomerListPage";
import TopCustomer from "./pages/customer/TopCustomer";
import { useAuth } from "./context/AuthContext";
import Unauthorized from "./pages/misc/Unauthorized";
import NotFound from "./pages/misc/NotFound";

// üëâ Report page
import ReportDashboard from "./pages/report/ReportDashboard";
import RevenueReport from "./pages/report/RevenueReport";
import TaxDeclaration from "./pages/report/TaxDeclaration";
import TopProductsReport from "./pages/report/TopProductsReport";

// Hi·ªáu ·ª©ng Design
import { Spin } from "antd";
import { LoadingOutlined } from "@ant-design/icons";
import ProductGroupsPage from "./pages/productGroup/ProductGroupsPage";

const loadingIcon = <LoadingOutlined style={{ fontSize: 40 }} spin />;

/** Utility: ƒë·ªçc user t·ª´ localStorage (fallback) */
function getStoredUser() {
  try {
    const raw = localStorage.getItem("user");
    if (!raw) return null;
    return JSON.parse(raw);
  } catch (err) {
    console.warn("Invalid user in localStorage", err);
    return null;
  }
}

/** Utility: ki·ªÉm tra permission (ANY logic: c√≥ √≠t nh·∫•t 1 permission) */
function hasPermission(menu = [], required) {
  if (!required) return true;
  const reqs = Array.isArray(required) ? required : [required];
  return reqs.some((r) => menu.includes(r));
}

// üëâ FIX: Tweak ProtectedRoute - ∆∞u ti√™n ctxUser h∆°n storedUser, v√† ch·ªâ check role/permission n·∫øu !loading
// (nh∆∞ng v√¨ loading ƒë√£ handle ·ªü ƒë·∫ßu, n√™n an to√†n h∆°n, tr√°nh flicker n·∫øu state lag)
const ProtectedRoute = ({ children, allowedRoles = [], allowedPermissions = null }) => {
  const { token, user: ctxUser, loading } = useAuth();

  if (loading) {
    return (
      <Spin spinning size="large" indicator={loadingIcon} tip="ƒêang x√°c th·ª±c quy·ªÅn truy c·∫≠p...">
        <div className="flex justify-center items-center min-h-screen">
          <div className="text-center p-4"></div>
        </div>
      </Spin>
    );
  }

  // üëâ FIX: Prefer context user FIRST, fallback to localStorage (v√¨ sau login, ctxUser set tr∆∞·ªõc)
  const storedUser = getStoredUser();
  const user = ctxUser || storedUser || null; // ƒê√£ t·ªët, nh∆∞ng comment r√µ

  const isAuthenticated = Boolean(token) || Boolean(user);
  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  // üëâ FIX: Ch·ªâ check role/permission n·∫øu user ƒë·∫ßy ƒë·ªß (c√≥ role/menu), tr√°nh null crash
  // Role check if provided
  if (allowedRoles.length > 0) {
    const role = (user && user.role) || null;
    if (!role || !allowedRoles.includes(role)) {
      return <Navigate to="/unauthorized" replace />;
    }
  }

  // Permissions check if provided
  if (allowedPermissions) {
    const menu = (user && user.menu) || [];
    if (!hasPermission(menu, allowedPermissions)) {
      return <Navigate to="/unauthorized" replace />;
    }
  }

  return children;
};

/**
 * PublicRoute
 * - D√πng cho trang auth (login/register/verify)
 * - N·∫øu ƒë√£ login -> redirect /unauthorized (theo y√™u c·∫ßu)
 * - allowWhenAuth: n·∫øu true s·∫Ω cho ph√©p truy c·∫≠p trang public ngay c·∫£ khi ƒë√£ ƒëƒÉng nh·∫≠p
 */
const PublicRoute = ({ children, allowWhenAuth = false }) => {
  const { token, user: ctxUser, loading } = useAuth();

  if (loading) {
    return (
      <Spin spinning size="large" indicator={loadingIcon} tip="Vui l√≤ng ƒë·ª£i, ƒëang v√†o h·ªá th·ªëng...">
        <div className="flex justify-center items-center min-h-screen">
          <div className="text-center p-4"></div>
        </div>
      </Spin>
    );
  }

  // üëâ FIX: T∆∞∆°ng t·ª±, prefer ctxUser
  const storedUser = getStoredUser();
  const user = ctxUser || storedUser || null;

  if (user && !allowWhenAuth) {
    return <Navigate to="/unauthorized" replace />;
  }

  // also if token exists but no user in context/storage, still allow public pages
  // (you can change this behavior if you prefer token-only redirect)
  return children;
};

function App() {
  return (
    <Routes>
      {/* Public (Auth) routes - b·ªçc PublicRoute */}
      <Route
        path="/login"
        element={
          <PublicRoute>
            <LoginPage />
          </PublicRoute>
        }
      />
      <Route
        path="/register"
        element={
          <PublicRoute>
            <RegisterPage />
          </PublicRoute>
        }
      />
      <Route
        path="/verify-otp"
        element={
          <PublicRoute>
            <VerifyOtpPage />
          </PublicRoute>
        }
      />
      <Route
        path="/forgot-password"
        element={
          <PublicRoute>
            <ForgotPassword />
          </PublicRoute>
        }
      />

      {/* Protected routes */}
      <Route
        path="/dashboard"
        element={
          <ProtectedRoute>
            <DashboardPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/select-store"
        element={
          <ProtectedRoute>
            <SelectStorePage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/profile"
        element={
          <ProtectedRoute>
            <Profile />
          </ProtectedRoute>
        }
      />

      <Route
        path="/suppliers"
        element={
          <ProtectedRoute allowedPermissions="supplier:view">
            <SupplierListPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/products"
        element={
          <ProtectedRoute allowedPermissions="products:view">
            <ProductListPage />
          </ProtectedRoute>
        }
      />

      {/* Customer page (v√≠ d·ª• y√™u c·∫ßu permission customers:search) */}
      <Route
        path="/customers-list"
        element={
          <ProtectedRoute allowedPermissions="customers:search">
            <CustomerListPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/customers/top-customers"
        element={
          <ProtectedRoute allowedPermissions="customers:search">
            <TopCustomer/>
          </ProtectedRoute>
        }
      />

      <Route
        path="/product-groups"
        element={
          <ProtectedRoute allowedPermissions="products:view">
            <ProductGroupsPage />
          </ProtectedRoute>
        }
      />

      {/* Loyalty (v√≠ d·ª• check role) */}
      <Route
        path="/loyalty/config"
        element={
          <ProtectedRoute allowedRoles={["MANAGER", "STAFF"]}>
            <LoyaltySetting />
          </ProtectedRoute>
        }
      />
      {/* ======================================================================= */}
      {/* ====================== B√°o c√°o - Routes ====================== */}
      <Route
        path="/reports/dashboard"
        element={
          <ProtectedRoute allowedPermissions="reports:financial:view">
            <ReportDashboard />
          </ProtectedRoute>
        }
      />
      <Route
        path="/reports/revenue"
        element={
          <ProtectedRoute allowedPermissions="reports:revenue:view">
            <RevenueReport />
          </ProtectedRoute>
        }
      />
      <Route
        path="/reports/tax"
        element={
          <ProtectedRoute allowedPermissions="tax:preview">
            <TaxDeclaration />
          </ProtectedRoute>
        }
      />
      <Route
        path="/reports/top-products"
        element={
          <ProtectedRoute allowedPermissions="reports:top-products">
            <TopProductsReport />
          </ProtectedRoute>
        }
      />
      {/* ======================================================================= */}
      {/* Unauthorized */}
      <Route path="/unauthorized" element={<Unauthorized />} />

      {/* Default: ƒëi·ªÅu h∆∞·ªõng t·ªõi dashboard (ProtectedRoute s·∫Ω x·ª≠ l√Ω redirect t·ªõi /login n·∫øu ch∆∞a auth) */}
      <Route path="*" element={<NotFound />} />
    </Routes>
  );
}

export default App;
